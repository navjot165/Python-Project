# Generated by Django 3.0 on 2023-02-01 05:48

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('full_name', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email address')),
                ('mobile_no', models.CharField(blank=True, max_length=20, null=True)),
                ('country_code', models.CharField(blank=True, max_length=5, null=True)),
                ('profile_pic', models.FileField(blank=True, null=True, upload_to='profile_pic/')),
                ('role_id', models.PositiveIntegerField(blank=True, choices=[(1, 'Admin'), (2, 'Customer'), (3, 'Captain'), (4, 'SubAdmin')], default=1, null=True)),
                ('status', models.PositiveIntegerField(blank=True, choices=[(1, 'Active'), (2, 'Inactive'), (3, 'Deleted'), (4, 'Suspended'), (5, 'Terminated')], default=1, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_on', models.DateTimeField(auto_now=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('location', models.TextField(blank=True, null=True)),
                ('short_location', models.TextField(blank=True, null=True)),
                ('temp_otp', models.CharField(blank=True, max_length=10, null=True)),
                ('otp_verified', models.BooleanField(blank=True, default=False, null=True)),
                ('gender', models.PositiveIntegerField(blank=True, choices=[(1, 'Male'), (2, 'FEMALE'), (3, 'Other')], null=True)),
                ('send_notifications', models.BooleanField(default=True)),
                ('referral_code', models.CharField(blank=True, max_length=15, null=True)),
                ('is_referred', models.BooleanField(default=False)),
                ('category', models.PositiveIntegerField(blank=True, choices=[(1, 'HV'), (2, 'MV'), (3, 'LV')], null=True)),
                ('is_profile_setup', models.BooleanField(default=False)),
                ('social_id', models.CharField(blank=True, max_length=255, null=True)),
                ('social_type', models.PositiveIntegerField(blank=True, choices=[(1, 'Google'), (2, 'Instagram'), (3, 'Facebook'), (4, 'Apple')], null=True)),
                ('average_rating', models.FloatField(blank=True, default=0, null=True)),
                ('is_profile_verified', models.BooleanField(blank=True, default=False, null=True)),
                ('mpesa_number', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'user',
                'permissions': [('customers_list', 'Can View Customers List'), ('edit_customer', 'Can Edit A Customer Profile'), ('view_customer', 'Can View Customer Details'), ('activate_deactivate_delete_customer', 'Can Activate/Deactivate/Delete Customer Profile')],
                'managed': True,
                'default_permissions': (),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Cities',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('initials', models.CharField(blank=True, max_length=10, null=True)),
                ('status', models.PositiveIntegerField(blank=True, choices=[(1, 'Active'), (2, 'Inactive')], default=1, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_on', models.DateTimeField(auto_now=True, null=True)),
                ('default', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'cities',
                'permissions': [('cities_list', 'Can View Cities List'), ('add_city', 'Can Add A City'), ('edit_city', 'Can Edit A City'), ('delete_city', 'Can Delete A City'), ('view_city', 'Can View City Details')],
                'managed': True,
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Currencies',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('code', models.CharField(blank=True, max_length=255, null=True)),
                ('symbol', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'currencies',
                'permissions': [('currencies_list', 'Can View Currencies List'), ('delete_currency', 'Can Delete A Currency')],
                'managed': True,
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='LoginHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('User_Ip', models.CharField(blank=True, max_length=255, null=True)),
                ('User_agent', models.CharField(blank=True, max_length=255, null=True)),
                ('State', models.CharField(blank=True, default=django.utils.timezone.now, max_length=255, null=True)),
                ('Code', models.CharField(blank=True, default=django.utils.timezone.now, max_length=255, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('user', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'login_history',
                'permissions': [('loginhistory_list', 'Can View Login History List'), ('clear_loginhistory', 'Can Clear All Login History')],
                'managed': True,
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='UserWallet',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.FloatField(blank=True, default=0, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_on', models.DateTimeField(auto_now=True, null=True)),
                ('mpesa_number', models.CharField(blank=True, max_length=100, null=True)),
                ('linked_to_mpesa', models.BooleanField(blank=True, default=False, null=True)),
                ('cards_linked', models.BooleanField(blank=True, default=False, null=True)),
                ('user', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'wallet',
                'managed': True,
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='PaymentCycles',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('period', models.PositiveIntegerField(blank=True, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_on', models.DateTimeField(auto_now=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'payment_cycles',
                'managed': True,
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('upload', models.FileField(blank=True, null=True, upload_to='vehicles/')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'image',
                'managed': True,
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('initials', models.CharField(blank=True, max_length=10, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_on', models.DateTimeField(auto_now=True, null=True)),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.Cities')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'district',
                'permissions': [('districts_list', 'Can View Districts List'), ('add_district', 'Can Add A District'), ('edit_district', 'Can Edit A District'), ('delete_district', 'Can Delete A District'), ('view_district', 'Can View District Details')],
                'managed': True,
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('device_type', models.PositiveIntegerField(blank=True, choices=[(1, 'Android'), (2, 'IOS')], null=True)),
                ('device_name', models.CharField(blank=True, max_length=255, null=True)),
                ('device_token', models.TextField(blank=True, null=True)),
                ('ip_address', models.CharField(blank=True, max_length=255, null=True)),
                ('device_model', models.CharField(blank=True, max_length=255, null=True)),
                ('imei', models.CharField(blank=True, max_length=255, null=True)),
                ('signups_count', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('bookings_count', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'device',
                'managed': True,
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Countries',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('initials', models.CharField(blank=True, max_length=10, null=True)),
                ('region', models.CharField(blank=True, max_length=255, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_on', models.DateTimeField(auto_now=True, null=True)),
                ('default', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.Currencies')),
            ],
            options={
                'db_table': 'countries',
                'permissions': [('countries_list', 'Can View Countries List'), ('add_country', 'Can Add A Country'), ('edit_country', 'Can Edit A Country'), ('delete_country', 'Can Delete A Country'), ('view_country', 'Can View Country Details')],
                'managed': True,
                'default_permissions': (),
            },
        ),
        migrations.AddField(
            model_name='cities',
            name='country',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.Countries'),
        ),
        migrations.AddField(
            model_name='cities',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='city',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.Cities'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='referred_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
