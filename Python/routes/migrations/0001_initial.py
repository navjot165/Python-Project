# Generated by Django 3.0 on 2023-02-02 16:43

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        ('holidays', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('buses', '0001_initial'),
        ('captains', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='RequestedRides',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('pickup_latitude', models.FloatField(blank=True, null=True)),
                ('pickup_longitude', models.FloatField(blank=True, null=True)),
                ('pickup_address', models.TextField(blank=True, null=True)),
                ('dropoff_latitude', models.FloatField(blank=True, null=True)),
                ('dropoff_longitude', models.FloatField(blank=True, null=True)),
                ('dropoff_address', models.TextField(blank=True, null=True)),
                ('request_count', models.PositiveIntegerField(blank=True, default=1, null=True)),
            ],
            options={
                'db_table': 'requested_rides',
                'managed': True,
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Routes',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('route_name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('show', models.BooleanField(blank=True, default=False, null=True)),
                ('distance', models.FloatField(blank=True, null=True)),
                ('duration', models.TimeField(blank=True, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_on', models.DateTimeField(auto_now=True, null=True)),
                ('overview_polyline', models.TextField(blank=True, null=True)),
                ('total_time_minutes', models.CharField(blank=True, max_length=200, null=True)),
                ('total_distance_km', models.CharField(blank=True, max_length=200, null=True)),
                ('timezone', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.Cities')),
            ],
            options={
                'db_table': 'routes',
                'permissions': [('routes_list', 'Can View Routes List'), ('add_route', 'Can Add A Route'), ('edit_route', 'Can Edit A Route'), ('view_route', 'Can View Route Details'), ('delete_route', 'Can Delete A Route'), ('activate_deactivate_route', 'Can Activate/Deactivate Route')],
                'managed': True,
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='SelectedCancelReason',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reason', models.TextField(blank=True, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True)),
            ],
            options={
                'db_table': 'selected_cancel_reason',
                'managed': True,
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='UserRideSearch',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('pickup_latitude', models.FloatField(blank=True, null=True)),
                ('pickup_longitude', models.FloatField(blank=True, null=True)),
                ('pickup_address', models.TextField(blank=True, null=True)),
                ('dropoff_latitude', models.FloatField(blank=True, null=True)),
                ('dropoff_longitude', models.FloatField(blank=True, null=True)),
                ('dropoff_address', models.TextField(blank=True, null=True)),
                ('is_ride_available', models.BooleanField(blank=True, default=False, null=True)),
                ('is_pickup_available', models.BooleanField(blank=True, default=False, null=True)),
                ('is_dropoff_available', models.BooleanField(blank=True, default=False, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('search_count', models.PositiveIntegerField(blank=True, default=1, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_ride_search',
                'permissions': [('ride_search_list', 'Can View Rides Search History List'), ('view_ride_search', 'Can View Ride Search History Details'), ('delete_ride_search', 'Can Delete A Ride Search History'), ('clear_ride_search', 'Can Clear Ride Search History')],
                'managed': True,
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='UserRequestedRide',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_on', models.DateTimeField(auto_now=True, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('preferred_pickup_time', models.DateTimeField(blank=True, null=True)),
                ('preferred_dropoff_time', models.DateTimeField(blank=True, null=True)),
                ('request_count_same_user', models.PositiveIntegerField(blank=True, default=1, null=True)),
                ('requested_ride', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='routes.RequestedRides')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_requested_ride',
                'managed': True,
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Stations',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('district', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.District')),
            ],
            options={
                'db_table': 'stations',
                'permissions': [('stations_list', 'Can View Stations List'), ('add_station', 'Can Add A Station'), ('view_station', 'Can View Station Details'), ('delete_station', 'Can Delete A Station')],
                'managed': True,
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Schedules',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('arrival_allowance', models.PositiveIntegerField(blank=True, null=True)),
                ('departure_allowance', models.PositiveIntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('schedule_price', models.FloatField(blank=True, null=True)),
                ('sunday', models.BooleanField(blank=True, default=False, null=True)),
                ('monday', models.BooleanField(blank=True, default=False, null=True)),
                ('tuesday', models.BooleanField(blank=True, default=False, null=True)),
                ('wednesday', models.BooleanField(blank=True, default=False, null=True)),
                ('thursday', models.BooleanField(blank=True, default=False, null=True)),
                ('friday', models.BooleanField(blank=True, default=False, null=True)),
                ('saturday', models.BooleanField(blank=True, default=False, null=True)),
                ('price_overrided', models.BooleanField(blank=True, default=False, null=True)),
                ('base_fare', models.FloatField(blank=True, null=True)),
                ('max_fare', models.FloatField(blank=True, null=True)),
                ('base_distance', models.FloatField(blank=True, null=True)),
                ('distance_bucket_size', models.FloatField(blank=True, null=True)),
                ('distance_bucket_fare', models.FloatField(blank=True, null=True)),
                ('time_bucket_size', models.PositiveIntegerField(blank=True, null=True)),
                ('time_bucket_fare', models.PositiveIntegerField(blank=True, null=True)),
                ('timezone', models.CharField(blank=True, max_length=255, null=True)),
                ('max_seats_per_person', models.PositiveIntegerField(blank=True, null=True)),
                ('flags', models.PositiveIntegerField(blank=True, choices=[(1, 'Premium'), (2, 'Economy')], null=True)),
                ('category_type', models.PositiveIntegerField(blank=True, choices=[(1, 'EV'), (2, 'NON_EV')], null=True)),
                ('total_time_minutes', models.CharField(blank=True, max_length=200, null=True)),
                ('total_distance_km', models.CharField(blank=True, max_length=200, null=True)),
                ('assigned_bus', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='buses.Buses')),
                ('assigned_captain', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='captains.Captain')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='holidays.Category')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('end_station', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='schedule_end_station', to='routes.Stations')),
                ('route', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='routes.Routes')),
                ('start_station', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='schedule_start_station', to='routes.Stations')),
            ],
            options={
                'db_table': 'schedule',
                'permissions': [('schedules_list', 'Can View Schedules List'), ('add_schedule', 'Can Add A Schedule'), ('edit_schedule', 'Can Edit A Schedule'), ('delete_schedule', 'Can Delete A Schedule'), ('view_schedule', 'Can View Schedule Details'), ('activate_deactivate_schedule', 'Can Activate/Deactivate A Schedule')],
                'managed': True,
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='RouteStationsCombination',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('time_minutes', models.CharField(blank=True, max_length=200, null=True)),
                ('distance_km', models.CharField(blank=True, max_length=200, null=True)),
                ('break_time_minutes', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('from_station', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='from_station', to='routes.Stations')),
                ('route', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='routes.Routes')),
                ('to_station', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='to_station', to='routes.Stations')),
            ],
            options={
                'db_table': 'station_combination',
                'managed': True,
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='RoutesStations',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('index', models.PositiveIntegerField(blank=True, default=1, null=True)),
                ('time_minutes', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('distance_km', models.FloatField(blank=True, default=0, null=True)),
                ('route', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='routes.Routes')),
                ('station', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='routes.Stations')),
            ],
            options={
                'db_table': 'route_station',
                'managed': True,
                'default_permissions': (),
            },
        ),
        migrations.AddField(
            model_name='routes',
            name='end_station',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='route_end_station', to='routes.Stations'),
        ),
        migrations.AddField(
            model_name='routes',
            name='start_station',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='route_start_station', to='routes.Stations'),
        ),
        migrations.CreateModel(
            name='Rides',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start_datetime', models.DateTimeField(blank=True, null=True)),
                ('end_datetime', models.DateTimeField(blank=True, null=True)),
                ('actual_start_datetime', models.DateTimeField(blank=True, null=True)),
                ('actual_end_datetime', models.DateTimeField(blank=True, null=True)),
                ('dispatch_datetime', models.DateTimeField(blank=True, null=True)),
                ('dispatch_type', models.PositiveIntegerField(blank=True, choices=[(1, 'Automatic'), (2, 'Manual')], null=True)),
                ('ride_price', models.FloatField(blank=True, null=True)),
                ('ride_status', models.PositiveIntegerField(blank=True, choices=[(1, 'SCHEDULED'), (2, 'INPROGRESS'), (3, 'CANCELLED'), (4, 'COMPLETED'), (5, 'ARRIVED_AT_STATION'), (6, 'STOPPED_RIDE')], default=1, null=True)),
                ('is_manual', models.BooleanField(default=False)),
                ('is_emergency', models.BooleanField(default=False)),
                ('is_confirmed', models.BooleanField(default=True)),
                ('flags', models.PositiveIntegerField(blank=True, choices=[(1, 'Premium'), (2, 'Economy')], null=True)),
                ('category_type', models.PositiveIntegerField(blank=True, choices=[(1, 'EV'), (2, 'NON_EV')], null=True)),
                ('price_config', models.PositiveIntegerField(blank=True, choices=[(1, 'Custom'), (2, 'Category')], null=True)),
                ('bookings_count', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('is_fully_booked', models.BooleanField(default=False)),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_on', models.DateTimeField(auto_now=True, null=True)),
                ('cancelled_at', models.DateTimeField(blank=True, null=True)),
                ('affected_bookings', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('live_tracking', models.BooleanField(default=False)),
                ('gps', models.BooleanField(default=False)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('dead_kms', models.FloatField(blank=True, null=True)),
                ('in_ride_dead_kms', models.FloatField(blank=True, null=True)),
                ('out_ride_dead_kms', models.FloatField(blank=True, null=True)),
                ('to_garage_dead_kms', models.FloatField(blank=True, null=True)),
                ('from_garage_dead_kms', models.FloatField(blank=True, null=True)),
                ('timezone', models.CharField(blank=True, max_length=255, null=True)),
                ('total_seats', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('seats_left', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('max_seats_per_person', models.PositiveIntegerField(blank=True, null=True)),
                ('arrival_allowance', models.PositiveIntegerField(blank=True, null=True)),
                ('departure_allowance', models.PositiveIntegerField(blank=True, null=True)),
                ('actual_captain', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='actual_captain', to='captains.Captain')),
                ('assigned_bus', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='buses.Buses')),
                ('assigned_captain', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ride_assigned_captain', to='captains.Captain')),
                ('cancellation_reasons', models.ManyToManyField(to='routes.SelectedCancelReason')),
                ('cancelled_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cancelled_by', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('end_ride_station', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='end_ride_station', to='routes.Stations')),
                ('route', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='routes.Routes')),
                ('schedule', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='routes.Schedules')),
                ('start_ride_station', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='start_ride_station', to='routes.Stations')),
            ],
            options={
                'db_table': 'rides',
                'permissions': [('rides_list', 'Can View Rides List'), ('add_ride', 'Can Add A Ride'), ('edit_ride', 'Can Edit A Ride'), ('delete_ride', 'Can Delete A Ride'), ('view_ride', 'Can View Ride Details'), ('view_ride_passengers', 'Can View Ride Passengers'), ('start_end_ride', 'Can Start/End A Ride'), ('change_booking_status', 'Can Mark CheckIn/CheckOut/Miss A Ride Passenger Booking'), ('cancel_ride', 'Can Cancel Ride')],
                'managed': True,
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='CancelReason',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('type_id', models.PositiveIntegerField(blank=True, choices=[(1, 'CANCEL_BOOKING_REASON')], null=True)),
                ('is_active', models.BooleanField(blank=True, default=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'cancel_reason',
                'permissions': [('cancel_reasons_list', 'Can View Cancellaton Reasons List'), ('add_cancel_reason', 'Can Add A Cancellaton Reason'), ('delete_cancel_reason', 'Can Delete A Cancellaton Reason'), ('activate_deactivate_reason', 'Can Activate/Deactivate A Cancellaton Reason')],
                'managed': True,
                'default_permissions': (),
            },
        ),
    ]
